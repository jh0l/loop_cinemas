import { act, screen, fireEvent } from "@testing-library/react";
import renderWithRouter from "./test-utils";

// APP
/**
 * Test that the app renders without crashing. This was generated by create-react-app.
 */
test("renders Home link", async () => {
  renderWithRouter("/");
  // wait for page to finish rendering
  const linkElement = await screen.findByTestId("Home");
  expect(linkElement).toBeInTheDocument();
});

// SIGNUP-PAGE
/**
 * sign up validates user input and displays error message
 * valid user input triggers signup
 */
test("signup page validates user input", async () => {
  renderWithRouter("/signup");
  // validates name
  const nameInput = await screen.findByTestId("name");
  // validates email
  const emailInput = await screen.findByTestId("email");
  // validates password
  const passwordInput = await screen.findByTestId("password");
  // validates confirm password
  const confirmPasswordInput = await screen.findByTestId("confirm_password");
  const submitButton = await screen.findByTestId("submit");
  await act(async () => {
    // wait for page to finish rendering
    emailInput.focus();
    // @ts-ignore
    emailInput.value = "invalid email";
    emailInput.blur();

    submitButton.click();
  });
  expect(nameInput).toHaveAttribute("aria-invalid", "true");
  expect(emailInput).toHaveAttribute("aria-invalid", "true");
  expect(passwordInput).toHaveAttribute("aria-invalid", "true");
  // enter valid name, email, invalid, password, confirm password
  renderWithRouter("/signup");

  act(() => {
    // name
    nameInput.focus();
    // @ts-ignore
    nameInput.value = "name";
    nameInput.blur();
  });
  act(() => {
    // email
    emailInput.focus();
    // @ts-ignore
    emailInput.value = "a@b.c";
    emailInput.blur();
  });
  // expect nameInput to not have aria-invalid attribute;
  expect(nameInput).not.toHaveAttribute("aria-invalid");
  expect(emailInput).not.toHaveAttribute("aria-invalid");
  expect(passwordInput).toHaveAttribute("aria-invalid", "true");

  // enter valid password
  act(() => {
    // password
    const p = btoa(Math.random().toString(36)) + "#@!";
    passwordInput.focus();
    // must be random sequence of 16 characters
    // @ts-ignore
    passwordInput.value = p;
    passwordInput.blur();

    // confirm password
    confirmPasswordInput.focus();
    // @ts-ignore
    confirmPasswordInput.value = p;
    confirmPasswordInput.blur();
  });
  await act(async () => {
    submitButton.click();
  });
  // test that
  expect(passwordInput).not.toHaveAttribute("aria-invalid");
  expect(confirmPasswordInput).not.toHaveAttribute("aria-invalid");
});
